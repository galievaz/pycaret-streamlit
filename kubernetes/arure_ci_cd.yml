name: Azure CICD Pipeline


on: [push]

env:
  AZURE_RESOURCE_GROUP: cd-with-actions
  AZURE_APP_PLAN: actions-ttt-deployment
  AZURE_LOCATION: '"Central US"'
  DOCKER_IMAGE_NAME: redcican-azure-eidodata
  IMAGE_REGISTRY_URL: docker.pkg.github.com
  AZURE_WEBAPP_NAME: redcican-eidodata-app

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - uses: actions/upload-artifact@master
      with:
        name: python artifacts
        path: public/

  Build-Docker-Image:
    runs-on: ubuntu-latest
    needs: build
    name: Build image and store in Github Packages
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Download built artifacts
        uses: actions/download-artifact@main
        with:
          name: python artifacts
          path: public
      - name: create image and store in Packages
        uses: mattdavis0351/actions/docker-gpr@1.3.0
        with:
          repo-token: ${{secrets.GITHUB_TOKEN}}
          image-name: ${{env.DOCKER_IMAGE_NAME}}

  # setup-up-azure-resources:
  #   runs-on: ubuntu-latest
  #   needs: Build-Docker-Image
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Azure login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Create Azure resource group
  #       if: success()
  #       run: |
  #         az group create --location ${{env.AZURE_LOCATION}} --name ${{env.AZURE_RESOURCE_GROUP}} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}

  #     - name: Create Azure app service plan
  #       if: success()
  #       run: |
  #         az appservice plan create --resource-group ${{env.AZURE_RESOURCE_GROUP}} --name ${{env.AZURE_APP_PLAN}} --is-linux --sku F1 --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}

  #     - name: Create webapp resource
  #       if: success()
  #       run: |
  #         az webapp create --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --plan ${{ env.AZURE_APP_PLAN }} --name ${{ env.AZURE_WEBAPP_NAME }}  --deployment-container-image-name nginx --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}

  #     - name: Configure webapp to use GitHub Packages
  #       if: success()
  #       run: |
  #         az webapp config container set --docker-custom-image-name nginx --docker-registry-server-password ${{secrets.GITHUB_TOKEN}} --docker-registry-server-url https://docker.pkg.github.com --docker-registry-server-user ${{github.actor}} --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}



  # Deploy-to-Azure:
  #   runs-on: ubuntu-latest
  #   needs: setup-up-azure-resources
  #   name: Deploy app container to Azure
  #   steps:
  #     - name: "Login via Azure CLI"
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - uses: azure/docker-login@v1
  #       with:
  #         login-server: ${{env.IMAGE_REGISTRY_URL}}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Deploy web app container
  #       uses: azure/webapps-deploy@v2
  #       with:
  #         app-name: ${{env.AZURE_WEBAPP_NAME}}
  #         images: ${{env.IMAGE_REGISTRY_URL}}/${{ github.repository }}/${{env.DOCKER_IMAGE_NAME}}:${{ github.sha }}

  #     - name: Azure logout
  #       run: |
  #         az logout